(21-March-2025)_class Solution {
  public:
   int solve(int index, vector<int>& arr, vector<int>& dp) {
        if(index >= arr.size()) return 0;
        if(dp[index] != -1) return dp[index];   
        int include = arr[index] + solve(index + 2, arr, dp);
        int exclude = solve(index + 1, arr, dp);
    
        return dp[index] = max(include, exclude);
    }

    int findMaxSum(vector<int>& arr) {
        int n = arr.size();
        vector<int> dp(n, -1);
        return solve(0, arr, dp);
    }
};

//ðŸ•’ Optimized from O(nÂ²) to O(n) using tabulation.

int findMaxSum(vector<int>& arr) {
    int n = arr.size();
    if(n == 0) return 0;
    if(n == 1) return arr[0];

    vector<int> dp(n);
    dp[0] = arr[0];
    dp[1] = max(arr[0], arr[1]);

    for(int i = 2; i < n; i++) {
        dp[i] = max(dp[i-1], arr[i] + dp[i-2]);
    }

    return dp[n-1];
}
